# Obtener el token
$responseLogin = Invoke-RestMethod -Uri "http://localhost:3002/threads/login" -Method POST -Headers @{ "Content-Type" = "application/json" } -Body '{"username": "admin", "password": "password"}'
$token = $responseLogin.token  # Ajusta esto según el nombre de la propiedad en tu respuesta JSON

-------------------------------------------------------------------------------------------------------------------------

# Define la URL para crear un nuevo thread (/threads/create)
$url = "http://localhost:3002/threads/create"

# Define los headers para la solicitud
$headers = @{ 
    "Content-Type" = "application/json"; 
    "Authorization" = "Bearer $token"  # Incluye el token en el encabezado
}

# Define el cuerpo de la solicitud con la pregunta 
$body = @{ "prompt" = "¿Qué día ha habido el mayor número de personas en el huerto?" } | ConvertTo-Json

# Realiza la solicitud para crear el thread
$response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body

# Para mostrar la respuesta completa por el terminal
$response | ConvertTo-Json -Depth 10 | Out-String

# Guardamos el threadId y assistantId para usarlo después
$threadId = $response.threadId
$assistantId = $response.assistantId

-------------------------------------------------------------------------------------------------------------------------

# Define la URL para enviar un mensaje al thread existente (/threads/message)
$url = "http://localhost:3002/threads/message"

# Define los headers para la solicitud
$headers = @{ 
    "Content-Type" = "application/json"; 
    "Authorization" = "Bearer $token"  # Incluye el token en el encabezado
}

# Define el cuerpo de la solicitud con el threadId, assistantId y el mensaje
$body = @{
    "threadId" = $threadId  # threadId dado al crear el thread
    "assistantId" = $assistantId  # assistantId dado al crear el thread
    "prompt" = "¿Qué día de la semana suele haber más personas en el huerto?"
} | ConvertTo-Json

# Realiza la solicitud para enviar un mensaje
$response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body

# Muestra la respuesta completa por el terminal
$response | ConvertTo-Json -Depth 10 | Out-String

-------------------------------------------------------------------------------------------------------------------------

# Define la URL para enviar otro mensaje al thread existente (/threads/message)
$url = "http://localhost:3002/threads/message"

# Define los headers para la solicitud
$headers = @{ 
    "Content-Type" = "application/json"; 
    "Authorization" = "Bearer $token"  # Incluye el token en el encabezado
}

# Define el cuerpo de la solicitud con el threadId, assistantId y el mensaje
$body = @{
    "threadId" = $threadId  # threadId dado al crear el thread
    "assistantId" = $assistantId  # assistantId dado al crear el thread
    "prompt" = "¿Cuál es el número de personas más habitual en el huerto?"
} | ConvertTo-Json

# Realiza la solicitud para enviar un mensaje
$response = Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body

# Muestra la respuesta completa por el terminal
$response | ConvertTo-Json -Depth 10 | Out-String

-------------------------------------------------------------------------------------------------------

# Define la URL del endpoint con el threadId que quieres eliminar
$url = "http://localhost:3002/threads/delete/$threadId"

# Crea el encabezado con el token Bearer
$headers = @{
    "Authorization" = "Bearer $token"
}

# Realiza la solicitud DELETE con el encabezado
$response = Invoke-RestMethod -Uri $url -Method Delete -Headers $headers

# Muestra la respuesta completa
$response